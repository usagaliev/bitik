export const bitikMap: Record<string, string> = {
	–∞: 'ê∞Ä',
	–±: 'ê∞â', // –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
	–≤: 'ê∞ò',
	–≥: 'ê∞ç',
	–¥: 'ê∞ì',
	–µ: 'ê∞Ö',
	—ë: 'ê∞Ö',
	–∂: 'ê∞ê',
	–∑: 'ê∞î',
	–∏: 'ê∞É',
	–π: 'ê∞É',
	–∫: 'ê∞ö',
	–ª: 'ê∞†',
	–º: 'ê∞¢',
	–Ω: 'ê∞§',
	“£: 'ê∞ß',
	–æ: 'ê∞Ü',
	”©: 'ê∞á',
	–ø: 'ê∞Ø',
	—Ä: 'ê∞º',
	—Å: 'ê∞Ω',
	—Ç: 'ê±Ö',
	—É: 'ê∞á',
	“Ø: 'ê∞á',
	—Ñ: 'ê∞™',
	—Ö: 'ê∞¥',
	—Ü: 'ê±Å',
	—á: 'ê∞≤',
	—à: 'ê±Ç',
	—ã: 'ê∞É',
	—ç: 'ê∞É',
	—é: 'ê∞áê∞Ü',
	—è: 'ê∞Äê∞É',
	// —Å–ø–µ—Ü. –ø–∞—Ä—ã
	'—Ä—Ç': 'ê∞¥ê±Ö',
	'–ª—Ç': 'ê∞†ê±Ö',
	'–Ω—Ç': 'ê∞§ê±Ö',
	'–Ω—á': 'ê∞§ê∞≤',
};


export function transliterateToBitik(input: string): string {
	return input
		.toLowerCase()
		.split('')
		.map((char) => bitikMap[char] || char)
		.reverse() // –ø–æ—Ç–æ–º—É —á—Ç–æ –±–∏—Ç–∏–∫ —á–∞—Å—Ç–æ —á–∏—Ç–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
		.join('');
}